---
# This section fires up a set of guests dynamically using vagrant,
# registers it in the inventory under the group "vagrant_hosts"
# then logs in and pokes around.
#
# add_host doesn't work from roles so from "ansible-test integration"
#
# This test doesn't contribute to coverage and is only meant to show
# a working example with add_host
#
# Usage:
# ansible-playbook -i inventory/ansible/hosts vagrant-test.yaml


- hosts:
  - localhost
  connection: local
  gather_facts: False
  vars:
    ansible_python_interpreter: "/usr/bin/env python"

  tasks:
  - name: Add two vms to the Vagrantfile
    jclaveau.vagrant.config:
    args:
      state: "present"
      name: "srv001"
      config:
        box: debian/buster64

  - name: Fire up a vagrant instances to log into
    local_action: jclaveau.vagrant.up
    args:
      name: "srv001"
    register: vagrant_up_result

  - name: Retrieve ssh config
    local_action: jclaveau.vagrant.ssh_config
    args:
      name: "srv001"
    register: vagrant_ssh_config_result

  - name: Dump vagrant_ssh_config_result
    ansible.builtin.debug:
      var: vagrant_ssh_config_result

  - name: Adds this node as e member of Ansible's inventory
    ansible.builtin.add_host:
      groupname: vagrant_hosts
      hostname: '{{item.Host}}'
      ansible_ssh_port: '{{item.Port}}'
      ansible_ssh_host: '{{item.HostName}}'
      ansible_ssh_private_key_file: '{{item.IdentityFile}}'
      ansible_ssh_args: ' -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ' # avoids ssh key storing and fixes warnings "sftp|scp transfer mechanism failed on [127.0.0.1]"
    loop: '{{ vagrant_ssh_config_result.ssh_configs }}'

# Run on the vagrant_hosts group, checking that we have basic ssh access...
- hosts:
  - vagrant_hosts
  user: vagrant
  vars:
    ansible_python_interpreter: "/usr/bin/env python"
  gather_facts: True

  tasks:
  - name: Lets see if we can login
    command: uname -a

  - name: Generate a ./blah_ansible.vars to check for hostvars
    action: template src=test-vagrant-hostinfo.j2 dest=/tmp/localhost_ansible.vars

  - name: Take a look at the outputs ...  (Messy!)
    command: cat /tmp/localhost_ansible.vars
    register: vars_result

  - name: dbg vars_result
    ansible.builtin.debug:
      msg: "{{ vars_result }}"

  - name: cat /tmp/localhost_ansible.vars should succeed
    assert:
      that:
        - vars_result is success

  - name: Now clear everything
    local_action: jclaveau.vagrant.destroy
    args:
      name: srv001
